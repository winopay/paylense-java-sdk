/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.1/userguide/java_library_plugin.html
 */


buildscript {
    repositories {
        jcenter()
        mavenCentral()
        //Add only for SNAPSHOT versions
        //maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.20.0"
    }
}


plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'

    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id 'checkstyle'
    id 'net.saliman.cobertura' version '2.5.4'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'osgi'
}

repositories {
    jcenter()
}


apply plugin: 'io.codearte.nexus-staging'

apply plugin: 'maven-publish'
apply plugin: 'signing'


sourceCompatibility = 1.8
targetCompatibility = 1.8

group = GROUP
version = VERSION_NAME


dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    compile("com.squareup.retrofit2:retrofit:2.5.0")
    compile("com.squareup.retrofit2:converter-gson:2.5.0")

    compile("com.squareup.okhttp3:okhttp:3.14.0")
    compile("com.squareup.okhttp3:logging-interceptor:3.14.0")
    compile "com.squareup.retrofit2:adapter-rxjava:2.5.0"
    compile 'com.squareup.retrofit2:converter-scalars:2.5.0'


    implementation("io.reactivex:rxjava:1.1.5")

    compile("commons-codec:commons-codec:1.12")

    compile 'joda-time:joda-time:2.10.1'

    compile 'com.jakewharton.timber:timber:4.1.0'

    implementation("com.google.dagger:dagger:2.21")
    annotationProcessor("com.google.dagger:dagger-compiler:2.21")


    compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'

    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

    compile group: 'org.gradle', name: 'api', version: '1.0'


    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:26.0-jre'

    // Use the latest Groovy version for Spock testing
    testImplementation 'org.codehaus.groovy:groovy-all:2.5.4'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:1.2-groovy-2.5'
    testImplementation 'junit:junit:4.12'

    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.22.0'
    testRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.12.1'
    testCompile("org.apache.jclouds:jclouds-core:2.0.2:tests")
    testCompile("org.apache.jclouds.driver:jclouds-slf4j:2.0.2")
    testCompile('org.testng:testng:6.11')
    testCompile('org.assertj:assertj-core:3.8.0')
    compile "org.apache.jclouds:jclouds-core:2.0.2"
}

jar {
    manifest {
        attributes("Implementation-Title": POM_NAME,
                "Implementation-Version": VERSION_NAME,
                "Implementation-Vendor": VENDOR_NAME)

        version = VERSION_NAME
        symbolicName = POM_ARTIFACT_ID

        instruction 'Export-Package', '*'
    }
}

lombok {
    version = "1.18.2"
    sha256 = ""
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

task delombokHelp(type: DelombokTask) {
    args "--help"
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = true
}


if (project.hasProperty("signing.keyId")) {
    apply from: 'deploy.gradle'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

task provisionUser(type: JavaExec) {
    standardInput = System.in
    classpath sourceSets.main.runtimeClasspath
    main = "com.winopay.paylense"

}

checkstyle {
    toolVersion = '8.16'
    showViolations = true
    ignoreFailures = true
}

cobertura {
    coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
    coverageIgnoreTrivial = true // ignore getters/setters in coverage report
    coverageIgnoreMethodAnnotations = ["java.lang.Deprecated", "lombok.Generated"]
}
